<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[基于ambari安装hadoop集群]]></title>
    <url>%2F2018%2F03%2F01%2F%E5%9F%BA%E4%BA%8Eambari%E5%AE%89%E8%A3%85hadoop%E9%9B%86%E7%BE%A4%2F</url>
    <content type="text"><![CDATA[配置平台 主机名 IP地址 master 192.168.2.95 slave1 192.168.2.96 slave2 192.168.2.97 关闭防火墙与安全机制 1234systemctl stop firewalld.servicesystemctl disable firewalld.service setenforce 0sed -i &quot;s/enforcing/disabled/g&quot; /etc/sysconfig/selinux 修改hosts文件1234[root@master ~]# vim /etc/hosts192.168.2.95 master192.168.2.96 slave1192.168.2.97 slave2 拷贝到所有集群12[root@master ~]# scp /etc/hosts slave1:/etc/[root@master ~]# scp /etc/hosts slave2:/etc/ 修改安全设置开启面交互认证 123[root@master ~]# vim /etc/ssh/sshd_configRSAAuthentication yesPubkeyAuthentication yes 修改集群所有 12[root@master ~]# scp /etc/ssh/sshd_config slave1:/etc/ssh/[root@master ~]# scp /etc/ssh/sshd_config slave2:/etc/ssh/ 配置ssh免密钥登陆1# ssh-keygen -t rsa //在所有机器上执行 一路回车 在每台机器上进入密钥文件夹 1[root@master ~]# cd /root/.ssh 在master上执行1[root@master .ssh]# scp id_rsa.pub slave2:/root/.ssh/id_rsa-master.pub 在slave1上执行1scp id_rsa.pub slave2:/root/.ssh/id_rsa-slave1.pub 在slave2上执行12345[root@slave2 .ssh]# cat id_rsa-master.pub &gt;&gt;authorized_keys[root@slave2 .ssh]# cat id_rsa-slave1.pub &gt;&gt;authorized_keys[root@slave2 .ssh]# cat id_rsa.pub &gt;&gt;authorized_keys[root@slave2 .ssh]# scp authorized_keys master:/root/.ssh/authorized_keys[root@slave2 .ssh]# scp authorized_keys slave1:/root/.ssh/authorized_keys 测试免密钥链接1[root@master .ssh]# ssh slave2 时间同步在每台机器上安装ntp服务，让每台机器保持同样时间。 12[root@master ~]# yum -y install ntp[root@master ~]# ntpdate time.nist.gov 安装JDK123456789[root@master depends]# mkdir -p /usr/lib/jdk[root@master depends]# tar xf jdk-8u101-linux-x64.tar.gz -C /usr/lib/jdk/[root@master ~]# vim /etc/profile#JAVA Environmentexport JAVA_HOME=/usr/lib/jdkexport JRE_HOME=/usr/lib/jdk/jreexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATHexport CLASSPATH=$CLASSPATH:.:$JAVA_HOME/lib:$JRE_HOME/lib[root@master ~]# source /etc/profile 12[root@master ~]# echo $JAVA_HOME[root@master ~]# java -version 安装Mysql安装依赖包123456yum install autoconf numa* libaio libaio-devel -y[root@master ~]# yum -y install MySQL-server MySQL-devel MySQL-client[root@master ~]# vim /etc/my.cnf[root@master ~]# /usr/bin/mysql_install_db //初始化数据库[root@master ~]# chown -R mysql:mysql /var/lib/mysql[root@master ~]# systemctl start mysql 创建数据库12mysql&gt; create database ambari;mysql&gt; grant all privileges on ambari.* to &apos;ambari&apos;@&apos;master&apos; identified by &apos;ambari&apos;; 复制mysql驱动java包 123[root@master depends]# mkdir /usr/share/java[root@master depends]# cp mysql-connector-java-5.1.38-bin.jar /usr/share/java[root@master depends]# cp mysql-connector-java-5.1.38-bin.jar /usr/lib/ambari-server/ 安装ambari12[root@master ~]# yum -y install ambari-serversource /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql //初始化数据库 配置ambari1[root@master ~]# ambari-server setup 启动ambair 访问ambari1http://192.168.2.95:8080/#/login 用户密码：admin/admin 创建集群 等待完成]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pip下载以及离线安装]]></title>
    <url>%2F2018%2F03%2F01%2Fpip%E4%B8%8B%E8%BD%BD%E4%BB%A5%E5%8F%8A%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[PIP下载由于有的地方没有外网只能离线安装 1234下载单个Package$ pip install &lt;package&gt; --download /dingyi下载多个Package$ pip install --download /dingyi -r requirements.txt PIP安装 将下载好的Packages拷贝至内网服务器 使用scp、sftp等方式将下载好的Packages拷贝至需要离线安装这些包的内网服务器。 安装Packages假设内网服务器的目录 /tmp/transferred_packages 包含你上一步远程拷贝过来packages，在内网服务器上执行如下命令 安装单个Package的情况1$ pip install --no-index --find-links=&quot;/dingyi&quot; &lt;package&gt; 安装多个Packages1$ pip install --no-index --find-links=&quot;/dingyi&quot; -r requirements.txt]]></content>
      <categories>
        <category>运维分享</category>
      </categories>
      <tags>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[fcn内网穿透一键接入私有网络搭建]]></title>
    <url>%2F2018%2F03%2F01%2Ffcn%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E4%B8%80%E9%94%AE%E6%8E%A5%E5%85%A5%E7%A7%81%E6%9C%89%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[支持平台 操作系统 文件名 Windows操作系统 windows/fcn_win.exe Linux操作系统 windows/fcn_win.exe Linux操作系统 linux-embedded/lede或openwrt/fcn_mips/mipsel/arm/armhf Linux arm linux-embedded/`fcn-arm/armbian Android Fcn.apk FCN github 地址：https://github.com/boywhp/fcn windows 搭建 点启动就行 客户端链接 这时候可以访问你服务器的网络。你懂的 linux 搭建我用的是centos系统 把fcn_x64上传到服务器修改配置文件 vim fcn.conf 链接方式]]></content>
      <categories>
        <category>运维分享</category>
        <category>内网穿透</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis私有云平台cachecloud搭建]]></title>
    <url>%2F2018%2F03%2F01%2Fredis%E7%A7%81%E6%9C%89%E4%BA%91%E5%B9%B3%E5%8F%B0cachecloud%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[环境准备安装JDK1[root@]# tar xf jdk-8u101-linux-x64.tar.gz 添加环境变量 12345#JAVA Environmentexport JAVA_HOME=/usr/lib/jdkexport JRE_HOME=/usr/lib/jdk/jreexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATHexport CLASSPATH=$CLASSPATH:.:$JAVA_HOME/lib:$JRE_HOME/lib 安装Mysql1安装依赖 yum -y install autoconf numa* libaio libaio-devel 1234567891011121314151617181920212223242526yum -y install MySQL-server MySQL-devel MySQL-clientvim /etc/my.cnf添加[client]port = 3306socket = /var/lib/mysql/mysql.sockdefault-character-set=utf8[mysql]no-auto-rehashdefault-character-set=utf8[mysqld]datadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.sockuser=mysqlsymbolic-links=0lower_case_table_names=1character-set-server=utf8wait_timeout=31536000[mysqld_safe]log-error=/var/log/mysqld.logpid-file=/var/run/mysqld/mysqld.pid初始化数据库：/usr/bin/mysql_install_dbchown -R mysql:mysql /var/lib/mysql开启服务：[root@sql mysql]# systemctl start mysql 安装maven312345678wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gztar xf apache-maven-3.5.2-bin.tar.gz -C /usr/local/maven[root@CacheCloud local]# mv apache-maven-3.5.2/ maven[root@CacheCloud local]# vim /etc/profileexport MAVEN_HOME=/usr/local/mavenPATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH[root@CacheCloud local]# source /etc/profile[root@CacheCloud local]# mvn -version 安装CacheCloud下载cachecloud123git clone https://github.com/sohutv/cachecloud.git[root@CacheCloud cachecloud]# mv cachecloud-master/ /usr/local/cachecloud/[root@CacheCloud cachecloud]# cd /usr/local/cachecloud/ mysql建表授权12345$ create database cachecloud;grant all on *.* to &apos;admin&apos;@&apos;localhost&apos; identified by &apos;admin&apos;;grant all on *.* to &apos;admin&apos;@&apos;127.0.0.1&apos; identified by &apos;admin&apos;;flush privileges;$ source /usr/local/cachecloud/script/cachecloud.sql //初始化cachecloud表 修改cachecloud 配置1234cd cachecloud-open-web/src/main/swap/[root@CacheCloud swap]# vim online.properties [root@CacheCloud swap]# vim local.properties 这两个文件都修改成如下配置 在cachecloud根目录下运行 1mvn clean compile install -Ponline 在cachecloud-open-web模块下运行 1mvn spring-boot:run 这时候可以访问 9999端口应该是开启的 访问 10.1.3.231:9999 生产环境在cachecloud根目录下运行 123mvn clean compile install -Ponline //没写重复cd /usr/local/cachecloud/script [root@CacheCloud script]# ./deploy.sh /usr/local/ 执行deploy 后面跟着cachecloud 源目录 启动CacheCloud12[root@CacheCloud script]# cd /opt/cachecloud-web/[root@CacheCloud cachecloud-web]# ./start.sh 这时候应8585端口应该开启 并关闭9999 用户密码 admin/admin 安装redis123[root@CacheCloud script]# cd /usr/local/cachecloud/script[root@CacheCloud script]# ./cachecloud-init.sh cachecloudnohup /opt/cachecloud/redis/src/redis-server /opt/cachecloud/redis/redis.conf &amp; 启动 遇到的问题以及解决办法 解决办法 12安装依赖 yum -y install gcc gcc-c++ libstdc++-develmake MALLOC=libc 不知道原因官网上没写 redis客户端无法连接 修改配置文件 redis.conf 的配置文件 69行 注释掉 编译安装报错 更换阿里云镜像就可以了 点击查看更换阿里云镜像]]></content>
      <categories>
        <category>运维分享</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[maven换成阿里云源，整个世界美好了]]></title>
    <url>%2F2018%2F03%2F01%2Fmaven%E6%8D%A2%E6%88%90%E9%98%BF%E9%87%8C%E4%BA%91%E6%BA%90%EF%BC%8C%E6%95%B4%E4%B8%AA%E4%B8%96%E7%95%8C%E7%BE%8E%E5%A5%BD%E4%BA%86%2F</url>
    <content type="text"><![CDATA[在maven安装目录下有个conf文件夹settings.xml 把镜像源换成阿里云的。下载就快了 12345678910[root@dingyi conf]# pwd/usr/local/maven/conf[root@dingyi conf]# vim settings.xml搜索&lt;mirror&gt; 146-159 之间替换&lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;/mirror&gt; 体验非一般的感觉吧！是不是一下世界就美好了呢！]]></content>
      <categories>
        <category>运维分享</category>
      </categories>
      <tags>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yearning-sql审计平台安装]]></title>
    <url>%2F2018%2F02%2F28%2Fyearning-sql%E5%AE%A1%E8%AE%A1%E5%B9%B3%E5%8F%B0%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[环境准备安装依赖 1yum -y install gcc gcc-c++ zlib zlib-devel -y openssl-devel 安装python3.6123456wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz[root@sql soft]# tar xf Python-3.6.4.tgz -C /usr/local/python3/[root@sql python3]# ./configure --prefix=/usr/local/python3[root@sql python3]# make &amp;&amp; make install [root@sql python3]# ln -s /usr/local/python3/bin/python3 /usr/bin/python3[root@sql bin]ln -s /usr/local/python3/bin/pip3.6 /usr/bin/pip3 编辑安装文件 /usr/local/python3/Modules/Setup 安装mysql123456789101112131415161718192021222324252627yum -y install autoconf numa* libaio libaio-devel yum -y install MySQL-server MySQL-devel MySQL-clientvim /etc/my.cnf添加[client]port = 3306socket = /var/lib/mysql/mysql.sockdefault-character-set=utf8[mysql]no-auto-rehashdefault-character-set=utf8[mysqld]datadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.sockuser=mysqlsymbolic-links=0lower_case_table_names=1character-set-server=utf8wait_timeout=31536000[mysqld_safe]log-error=/var/log/mysqld.logpid-file=/var/run/mysqld/mysqld.pid初始化数据库：/usr/bin/mysql_install_dbchown -R mysql:mysql /var/lib/mysql开启服务：[root@sql mysql]# systemctl start mysql 安装nginx123rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm[root@sql ~]# yum -y install nginx[root@sql ~]# systemctl start nginx 访问 10.1.3.111 出现下面截图说明正常 安装yearning123456git clone https://github.com/cookieY/Yearning.gitmv Yearning/ /usr/local/yearningcd /usr/local/yearningcd install/tar xf inception.tarcd inception/bin 修改配置文件 vim.cnf 启动inception如果这个不会作者在install里面已经有编译好的只需要修改配置文件就可以了 1/usr/local/yearning/install/inception/bin/Inception --defaults-file=/usr/local/yearning/install/inception/bin/inc.cnf 测试连接inception mysql -uroot -h127.0.0.1 -P6669 配置 yearning [root@sql src]# vim deploy.conf 安装yearning 依赖包 123pip3 install -r requirements.txt [root@sql src]# pip3 install -r requirements.txt 安装python依赖[root@sql src]# python3 manage.py makemigrations &amp;&amp; python3 manage.py migrate 初始化数据库 注意事项123由于Inception 并不原生支持pymysql，所以需更改pymysql相关源码修改 $PYTHON_HOME/lib/python3.6/site-packages/pymysql下connections.py 和 cursors.py 两个文件 vim /usr/local/python3/lib/python3.6/site-packages/pymysql/connections.py //1108行左右 123456789101112找到 connections.py 1108行 if int(self.server_version.split(&apos;.&apos;, 1)[0]) &gt;= 5: self.client_flag |= CLIENT.MULTI_RESULTS更改为 try: if int(self.server_version.split(&apos;.&apos;, 1)[0]) &gt;= 5: self.client_flag |= CLIENT.MULTI_RESULTS except: if self.server_version.split(&apos;.&apos;, 1)[0] &gt;= &apos;Inception2&apos;: self.client_flag |= CLIENT.MULTI_RESULTS [root@sql src]# vim /usr/local/python3/lib/python3.6/site-packages/pymysql/cursors.pyt 12345678找到 cursors.py 345行if self._result and (self._result.has_next or not self._result.warning_count): return更改为 if self._result: return 如果怕修改出错 。可以去安装目录install 下直接吧里面的文件替换到python目录下 12[root@sql install]# cp connections.py /usr/local/python3/lib/python3.6/site-packages/pymysql[root@sql install]# cp cursors.py /usr/local/python3/lib/python3.6/site-packages/pymysql 添加用户初始化1[root@sql src]# echo &quot;from core.models import Account;Account.objects.create_user(username=&apos;admin&apos;, password=&apos;Yearning_admin&apos;, group=&apos;admin&apos;,is_staff=1)&quot; | python3 manage.py shell 把编译好的文件复制到nginx html 目录下 1[root@sql nginx]# cp -rf /usr/local/yearning/webpage/dist/* /usr/share/nginx/html/ 重启nginx1[root@sql nginx]# systemctl restart nginx 启动django12[root@sql nginx]# cd /usr/local/yearning/src[root@sql src]# python3 manage.py runserver 0.0.0.0:8000 访问deploy.conf 配置文件中ipaddress 填写的地址 默认账号: admin 密码:Yearning_admin 遇到的问题问题1 解决办法yum install zlib zlib-devel -y 问题2 pip is configured … that require TLS/SSL 解决办法 到python3目录从新编译 编辑安装文件 /usr/local/python3/Modules/Setup 然后从新编辑安装]]></content>
      <categories>
        <category>运维分享</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[finder-web程序员查看日志利器]]></title>
    <url>%2F2018%2F02%2F27%2Ffinder-web%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97%E5%88%A9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[安装jdk 1.8版本1$ [root@nutch soft]# tar xf jdk-8u101-linux-x64.tar.gz 添加环境变量 12345#JAVA Environmentexport JAVA_HOME=/usr/lib/jdk/jdk1.8.0_101export JRE_HOME=/usr/lib/jdk/jdk1.8.0_101/jreexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATHexport CLASSPATH=$CLASSPATH:.:$JAVA_HOME/lib:$JRE_HOME/lib 安装tomcat123http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.4/bin/apache-tomcat-8.5.27.tar.gz[root@bogon soft]# mkdir /usr/local/tomcat# tar xf apache-tomcat-8.5.27.tar.gz -C /usr/local/tomcat/ 启动tomcat12[root@finder-web soft]# cd /usr/local/tomcat/[root@finder-web tomcat]# ./bin/startup.sh 访问 http://10.1.3.210:8080/ 单节点安装123456/usr/local/tomcat./bin/shutdown.shrm -rf webapps/ROOT/mkdir webapps/ROOTunzip -o -d webapps/ROOT finder-web-2.3.1.zip./bin/startup.sh http://10.1.3.210:8080/ 浏览器继续访问 用户名密码 默认admin 集群安装先按照单节点搭建完成然后启动 master节点 Slave1节点 在master上添加slave1节点 slave1从master同步 工作空间管理 设置log日志目录 安全设置需要同步key 查看集群log 文件浏览]]></content>
      <categories>
        <category>运维分享</category>
      </categories>
      <tags>
        <tag>log</tag>
      </tags>
  </entry>
</search>
